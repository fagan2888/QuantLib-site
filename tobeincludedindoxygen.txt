<h2 class="center">QuantLib Overview</h2>

<p>The folder structure of the sources reflects the organization of
classes and functions into namespaces. These are in turn chosen to
represent definite <em>packages</em> or <em>class families</em>:
the former being groups of classes forming a framework for
particular applications, e.g., the PDE package for partial
differential equations; and the latter being sets of classes which
inherit from a common base class or otherwise share a common
functionality and interface, e.g., the TermStructures or Operators
families, respectively.</p>

<h3 class="center">The QuantLib foundation</h3>

<p>The root namespace <tt>QuantLib</tt> contains what can be
considered the <strong>QuantLib foundation</strong>, i.e., the core
of abstract classes upon which the rest of the library is built.
Among the available features, the following are of particular
interest for the programmer who intends to use the library, or to
extend it at any level.</p>

<h4>Financial types</h4>

<p>A number of types is provided, such as <tt>Rate</tt>,
<tt>Spread</tt>, or <tt>DiscountFactor</tt>. All these types act
as, and indeed are, <tt>double</tt>s.</p>

<h4>Dates, day counting, and market holidays</h4>

<p>The concrete class <tt>Date</tt> implements the concept of date.
Its functionalities include:</p>

<ul>
<li>providing basic information such as weekday, day of the month,
day of the year, month, and year;</li>

<li>comparing two dates to determine whether they are equal, or
which one is the earlier or later, or the difference between them
expressed in days;</li>

<li>incrementing or decrementing a date of a given number of days,
or of a period expressed in weeks, months, or years.</li>
</ul>

<p>The abstract class <tt>DayCounter</tt> provides the interface to
more advanced means of measuring the distance between two dates
according to a given market convention, both as number of days of
fraction of year. A number of such conventions is contained in the
<tt>DayCounters</tt> namespace.</p>

<p>Finally, the abstract class <tt>Calendar</tt> provides the
interface for determining whether a date is a business day or a
holiday for a given market, or incrementing/decrementing a date of
a given number of business days. Again, a number of calendars is
contained in the <tt>Calendars</tt> namespace.</p>

<h4>Currencies</h4>

<p>The abstract class <tt>Currency</tt> provides the interface to
market conventions depending on the currency, such as the calendar
used or the number of settlement days. A number of such currencies
is contained in the <tt>Currencies</tt> namespace.</p>

<h4>Instruments, Term Structures, and Volatility Surfaces</h4>

<p>The abstract class <tt>Instrument</tt> provides the common
interface through which concrete implementations of different
financial instruments can be used. Also, two abstract classes are
provided which are derived from <tt>Instrument</tt> and implement
part of the interface, namely, <tt>PricedInstrument</tt> and
<tt>OTCInstrument</tt> (where OTC stands for over-the-counter).
Methods are declared for accessing the codes and value of the
instrument, and for setting the term structure and volatility
surface (see below) which will be used while pricing the
instrument. The <tt>Stock</tt> class is provided as an example in
the <tt>Instruments</tt> namespace, where concrete instrument
classes will be stored.</p>

<p>The abstract class <tt>TermStructure</tt> provides the common
interface to concrete term structure models. Among others, methods
are declared which return instantaneous forward rate, discount
factor, and zero rate at a given date. Adapter classes are provided
which already implement part of the required methods, thus allowing
the programmer to define only the non-redundant part. The
<tt>PiecewiseConstantForwards</tt> class is provided as an example
in the <tt>TermStructures</tt> namespace.</p>

<p>Finally, the abstract classes <tt>ForwardVolatilitySurface</tt>
and <tt>SwaptionVolatilitySurface</tt> provide the common interface
to concrete volatility models. No examples are available at this
time.</p>

<h4>1-Dimensional Solvers</h4>

<p>The abstract class <tt>Solver1D</tt> provides the interface to a
1-dimensional solver which can find the zeroes of a given function.
A number of such solvers is contained in the <tt>Solvers1D</tt>
namespace.</p>

<h3 class="center">The Finite Difference package</h3>

<p>A framework for the resolution of partial differential
equations, for the time being a very basic one, which have a
finite-difference approach is included in the library (see the
documentation for details.) This package is currently used to
obtain the numerical solution for the the Black-Scholes equation in
the case of american option.</p>

<p>This framework is aimed to evolve into the first example of a
general model interface. This interface will permit to price code
with homogeneity among different theoretical models, e.g.
Black-Scholes, interest-rate single-factor models, and numerical
techniques such as trinomial tree, finite difference, etc.</p>
